/* tslint:disable */
/* eslint-disable */
/**
 * sdapiv1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArtistItem,
    ArtistItemFromJSON,
    ArtistItemToJSON,
    CreateResponse,
    CreateResponseFromJSON,
    CreateResponseToJSON,
    EmbeddingsResponse,
    EmbeddingsResponseFromJSON,
    EmbeddingsResponseToJSON,
    ExtensionItem,
    ExtensionItemFromJSON,
    ExtensionItemToJSON,
    ExtrasBatchImagesRequest,
    ExtrasBatchImagesRequestFromJSON,
    ExtrasBatchImagesRequestToJSON,
    ExtrasBatchImagesResponse,
    ExtrasBatchImagesResponseFromJSON,
    ExtrasBatchImagesResponseToJSON,
    ExtrasSingleImageRequest,
    ExtrasSingleImageRequestFromJSON,
    ExtrasSingleImageRequestToJSON,
    ExtrasSingleImageResponse,
    ExtrasSingleImageResponseFromJSON,
    ExtrasSingleImageResponseToJSON,
    FaceRestorerItem,
    FaceRestorerItemFromJSON,
    FaceRestorerItemToJSON,
    Flags,
    FlagsFromJSON,
    FlagsToJSON,
    HttpValidationError,
    HttpValidationErrorFromJSON,
    HttpValidationErrorToJSON,
    HypernetworkItem,
    HypernetworkItemFromJSON,
    HypernetworkItemToJSON,
    ImageToImageResponse,
    ImageToImageResponseFromJSON,
    ImageToImageResponseToJSON,
    InterrogateRequest,
    InterrogateRequestFromJSON,
    InterrogateRequestToJSON,
    LatentUpscalerModeItem,
    LatentUpscalerModeItemFromJSON,
    LatentUpscalerModeItemToJSON,
    MemoryResponse,
    MemoryResponseFromJSON,
    MemoryResponseToJSON,
    ModulesApiModelsProgressResponse,
    ModulesApiModelsProgressResponseFromJSON,
    ModulesApiModelsProgressResponseToJSON,
    Options,
    OptionsFromJSON,
    OptionsToJSON,
    PngInfoRequest,
    PngInfoRequestFromJSON,
    PngInfoRequestToJSON,
    PngInfoResponse,
    PngInfoResponseFromJSON,
    PngInfoResponseToJSON,
    PreprocessResponse,
    PreprocessResponseFromJSON,
    PreprocessResponseToJSON,
    PromptStyleItem,
    PromptStyleItemFromJSON,
    PromptStyleItemToJSON,
    RealesrganItem,
    RealesrganItemFromJSON,
    RealesrganItemToJSON,
    SamplerItem,
    SamplerItemFromJSON,
    SamplerItemToJSON,
    SchedulerItem,
    SchedulerItemFromJSON,
    SchedulerItemToJSON,
    ScriptInfo,
    ScriptInfoFromJSON,
    ScriptInfoToJSON,
    ScriptsList,
    ScriptsListFromJSON,
    ScriptsListToJSON,
    SdModelItem,
    SdModelItemFromJSON,
    SdModelItemToJSON,
    SdVaeItem,
    SdVaeItemFromJSON,
    SdVaeItemToJSON,
    StableDiffusionProcessingImg2Img,
    StableDiffusionProcessingImg2ImgFromJSON,
    StableDiffusionProcessingImg2ImgToJSON,
    StableDiffusionProcessingTxt2Img,
    StableDiffusionProcessingTxt2ImgFromJSON,
    StableDiffusionProcessingTxt2ImgToJSON,
    TextToImageResponse,
    TextToImageResponseFromJSON,
    TextToImageResponseToJSON,
    TrainResponse,
    TrainResponseFromJSON,
    TrainResponseToJSON,
    UpscalerItem,
    UpscalerItemFromJSON,
    UpscalerItemToJSON,
} from '../models';

export interface CreateEmbeddingSdapiV1CreateEmbeddingPostRequest {
    body?: object;
}

export interface CreateHypernetworkSdapiV1CreateHypernetworkPostRequest {
    body?: object;
}

export interface ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest {
    extrasBatchImagesRequest?: ExtrasBatchImagesRequest;
}

export interface ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest {
    extrasSingleImageRequest?: ExtrasSingleImageRequest;
}

export interface Img2imgapiSdapiV1Img2imgPostRequest {
    stableDiffusionProcessingImg2Img?: StableDiffusionProcessingImg2Img;
}

export interface InterrogateapiSdapiV1InterrogatePostRequest {
    interrogateRequest?: InterrogateRequest;
}

export interface PnginfoapiSdapiV1PngInfoPostRequest {
    pngInfoRequest?: PngInfoRequest;
}

export interface PreprocessSdapiV1PreprocessPostRequest {
    body?: object;
}

export interface ProgressapiSdapiV1ProgressGetRequest {
    skipCurrentImage?: string;
}

export interface SetConfigSdapiV1OptionsPostRequest {
    body?: object;
}

export interface Text2imgapiSdapiV1Txt2imgPostRequest {
    stableDiffusionProcessingTxt2Img?: StableDiffusionProcessingTxt2Img;
}

export interface TrainEmbeddingSdapiV1TrainEmbeddingPostRequest {
    body?: object;
}

export interface TrainHypernetworkSdapiV1TrainHypernetworkPostRequest {
    body?: object;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest): Promise<runtime.ApiResponse<CreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Embedding
     */
    async createEmbeddingSdapiV1CreateEmbeddingPost(requestParameters: CreateEmbeddingSdapiV1CreateEmbeddingPostRequest): Promise<CreateResponse> {
        const response = await this.createEmbeddingSdapiV1CreateEmbeddingPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest): Promise<runtime.ApiResponse<CreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/create/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Hypernetwork
     */
    async createHypernetworkSdapiV1CreateHypernetworkPost(requestParameters: CreateHypernetworkSdapiV1CreateHypernetworkPostRequest): Promise<CreateResponse> {
        const response = await this.createHypernetworkSdapiV1CreateHypernetworkPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest): Promise<runtime.ApiResponse<ExtrasBatchImagesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-batch-images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasBatchImagesRequestToJSON(requestParameters.extrasBatchImagesRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasBatchImagesResponseFromJSON(jsonValue));
    }

    /**
     * Extras Batch Images Api
     */
    async extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(requestParameters: ExtrasBatchImagesApiSdapiV1ExtraBatchImagesPostRequest): Promise<ExtrasBatchImagesResponse> {
        const response = await this.extrasBatchImagesApiSdapiV1ExtraBatchImagesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest): Promise<runtime.ApiResponse<ExtrasSingleImageResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/extra-single-image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtrasSingleImageRequestToJSON(requestParameters.extrasSingleImageRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtrasSingleImageResponseFromJSON(jsonValue));
    }

    /**
     * Extras Single Image Api
     */
    async extrasSingleImageApiSdapiV1ExtraSingleImagePost(requestParameters: ExtrasSingleImageApiSdapiV1ExtraSingleImagePostRequest): Promise<ExtrasSingleImageResponse> {
        const response = await this.extrasSingleImageApiSdapiV1ExtraSingleImagePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Artists Categories
     */
    async getArtistsCategoriesSdapiV1ArtistCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/artist-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Artists Categories
     */
    async getArtistsCategoriesSdapiV1ArtistCategoriesGet(): Promise<Array<string>> {
        const response = await this.getArtistsCategoriesSdapiV1ArtistCategoriesGetRaw();
        return await response.value();
    }

    /**
     * Get Artists
     */
    async getArtistsSdapiV1ArtistsGetRaw(): Promise<runtime.ApiResponse<Array<ArtistItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/artists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArtistItemFromJSON));
    }

    /**
     * Get Artists
     */
    async getArtistsSdapiV1ArtistsGet(): Promise<Array<ArtistItem>> {
        const response = await this.getArtistsSdapiV1ArtistsGetRaw();
        return await response.value();
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGetRaw(): Promise<runtime.ApiResponse<Flags>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/cmd-flags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagsFromJSON(jsonValue));
    }

    /**
     * Get Cmd Flags
     */
    async getCmdFlagsSdapiV1CmdFlagsGet(): Promise<Flags> {
        const response = await this.getCmdFlagsSdapiV1CmdFlagsGetRaw();
        return await response.value();
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGetRaw(): Promise<runtime.ApiResponse<Options>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionsFromJSON(jsonValue));
    }

    /**
     * Get Config
     */
    async getConfigSdapiV1OptionsGet(): Promise<Options> {
        const response = await this.getConfigSdapiV1OptionsGetRaw();
        return await response.value();
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGetRaw(): Promise<runtime.ApiResponse<EmbeddingsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/embeddings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingsResponseFromJSON(jsonValue));
    }

    /**
     * Get Embeddings
     */
    async getEmbeddingsSdapiV1EmbeddingsGet(): Promise<EmbeddingsResponse> {
        const response = await this.getEmbeddingsSdapiV1EmbeddingsGetRaw();
        return await response.value();
    }

    /**
     * Get Extensions List
     */
    async getExtensionsListSdapiV1ExtensionsGetRaw(): Promise<runtime.ApiResponse<Array<ExtensionItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/extensions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtensionItemFromJSON));
    }

    /**
     * Get Extensions List
     */
    async getExtensionsListSdapiV1ExtensionsGet(): Promise<Array<ExtensionItem>> {
        const response = await this.getExtensionsListSdapiV1ExtensionsGetRaw();
        return await response.value();
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGetRaw(): Promise<runtime.ApiResponse<Array<FaceRestorerItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/face-restorers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaceRestorerItemFromJSON));
    }

    /**
     * Get Face Restorers
     */
    async getFaceRestorersSdapiV1FaceRestorersGet(): Promise<Array<FaceRestorerItem>> {
        const response = await this.getFaceRestorersSdapiV1FaceRestorersGetRaw();
        return await response.value();
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGetRaw(): Promise<runtime.ApiResponse<Array<HypernetworkItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/hypernetworks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HypernetworkItemFromJSON));
    }

    /**
     * Get Hypernetworks
     */
    async getHypernetworksSdapiV1HypernetworksGet(): Promise<Array<HypernetworkItem>> {
        const response = await this.getHypernetworksSdapiV1HypernetworksGetRaw();
        return await response.value();
    }

    /**
     * Get Latent Upscale Modes
     */
    async getLatentUpscaleModesSdapiV1LatentUpscaleModesGetRaw(): Promise<runtime.ApiResponse<Array<LatentUpscalerModeItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/latent-upscale-modes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LatentUpscalerModeItemFromJSON));
    }

    /**
     * Get Latent Upscale Modes
     */
    async getLatentUpscaleModesSdapiV1LatentUpscaleModesGet(): Promise<Array<LatentUpscalerModeItem>> {
        const response = await this.getLatentUpscaleModesSdapiV1LatentUpscaleModesGetRaw();
        return await response.value();
    }

    /**
     * Get Loras
     */
    async getLorasSdapiV1LorasGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/loras`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Loras
     */
    async getLorasSdapiV1LorasGet(): Promise<string> {
        const response = await this.getLorasSdapiV1LorasGetRaw();
        return await response.value();
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGetRaw(): Promise<runtime.ApiResponse<MemoryResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/memory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemoryResponseFromJSON(jsonValue));
    }

    /**
     * Get Memory
     */
    async getMemorySdapiV1MemoryGet(): Promise<MemoryResponse> {
        const response = await this.getMemorySdapiV1MemoryGetRaw();
        return await response.value();
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGetRaw(): Promise<runtime.ApiResponse<Array<PromptStyleItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/prompt-styles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptStyleItemFromJSON));
    }

    /**
     * Get Prompt Styles
     */
    async getPromptStylesSdapiV1PromptStylesGet(): Promise<Array<PromptStyleItem>> {
        const response = await this.getPromptStylesSdapiV1PromptStylesGetRaw();
        return await response.value();
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGetRaw(): Promise<runtime.ApiResponse<Array<RealesrganItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/realesrgan-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RealesrganItemFromJSON));
    }

    /**
     * Get Realesrgan Models
     */
    async getRealesrganModelsSdapiV1RealesrganModelsGet(): Promise<Array<RealesrganItem>> {
        const response = await this.getRealesrganModelsSdapiV1RealesrganModelsGetRaw();
        return await response.value();
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGetRaw(): Promise<runtime.ApiResponse<Array<SamplerItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/samplers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SamplerItemFromJSON));
    }

    /**
     * Get Samplers
     */
    async getSamplersSdapiV1SamplersGet(): Promise<Array<SamplerItem>> {
        const response = await this.getSamplersSdapiV1SamplersGetRaw();
        return await response.value();
    }

    /**
     * Get Schedulers
     */
    async getSchedulersSdapiV1SchedulersGetRaw(): Promise<runtime.ApiResponse<Array<SchedulerItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/schedulers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchedulerItemFromJSON));
    }

    /**
     * Get Schedulers
     */
    async getSchedulersSdapiV1SchedulersGet(): Promise<Array<SchedulerItem>> {
        const response = await this.getSchedulersSdapiV1SchedulersGetRaw();
        return await response.value();
    }

    /**
     * Get Script Info
     */
    async getScriptInfoSdapiV1ScriptInfoGetRaw(): Promise<runtime.ApiResponse<Array<ScriptInfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/script-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScriptInfoFromJSON));
    }

    /**
     * Get Script Info
     */
    async getScriptInfoSdapiV1ScriptInfoGet(): Promise<Array<ScriptInfo>> {
        const response = await this.getScriptInfoSdapiV1ScriptInfoGetRaw();
        return await response.value();
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGetRaw(): Promise<runtime.ApiResponse<ScriptsList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/scripts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptsListFromJSON(jsonValue));
    }

    /**
     * Get Scripts List
     */
    async getScriptsListSdapiV1ScriptsGet(): Promise<ScriptsList> {
        const response = await this.getScriptsListSdapiV1ScriptsGetRaw();
        return await response.value();
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGetRaw(): Promise<runtime.ApiResponse<Array<SdModelItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/sd-models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SdModelItemFromJSON));
    }

    /**
     * Get Sd Models
     */
    async getSdModelsSdapiV1SdModelsGet(): Promise<Array<SdModelItem>> {
        const response = await this.getSdModelsSdapiV1SdModelsGetRaw();
        return await response.value();
    }

    /**
     * Get Sd Vaes
     */
    async getSdVaesSdapiV1SdVaeGetRaw(): Promise<runtime.ApiResponse<Array<SdVaeItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/sd-vae`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SdVaeItemFromJSON));
    }

    /**
     * Get Sd Vaes
     */
    async getSdVaesSdapiV1SdVaeGet(): Promise<Array<SdVaeItem>> {
        const response = await this.getSdVaesSdapiV1SdVaeGetRaw();
        return await response.value();
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGetRaw(): Promise<runtime.ApiResponse<Array<UpscalerItem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/upscalers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpscalerItemFromJSON));
    }

    /**
     * Get Upscalers
     */
    async getUpscalersSdapiV1UpscalersGet(): Promise<Array<UpscalerItem>> {
        const response = await this.getUpscalersSdapiV1UpscalersGetRaw();
        return await response.value();
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPostRaw(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest): Promise<runtime.ApiResponse<ImageToImageResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/img2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingImg2ImgToJSON(requestParameters.stableDiffusionProcessingImg2Img),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageToImageResponseFromJSON(jsonValue));
    }

    /**
     * Img2Imgapi
     */
    async img2imgapiSdapiV1Img2imgPost(requestParameters: Img2imgapiSdapiV1Img2imgPostRequest): Promise<ImageToImageResponse> {
        const response = await this.img2imgapiSdapiV1Img2imgPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePostRaw(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/interrogate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterrogateRequestToJSON(requestParameters.interrogateRequest),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Interrogateapi
     */
    async interrogateapiSdapiV1InterrogatePost(requestParameters: InterrogateapiSdapiV1InterrogatePostRequest): Promise<string> {
        const response = await this.interrogateapiSdapiV1InterrogatePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/interrupt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Interruptapi
     */
    async interruptapiSdapiV1InterruptPost(): Promise<string> {
        const response = await this.interruptapiSdapiV1InterruptPostRaw();
        return await response.value();
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPostRaw(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest): Promise<runtime.ApiResponse<PngInfoResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/png-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PngInfoRequestToJSON(requestParameters.pngInfoRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PngInfoResponseFromJSON(jsonValue));
    }

    /**
     * Pnginfoapi
     */
    async pnginfoapiSdapiV1PngInfoPost(requestParameters: PnginfoapiSdapiV1PngInfoPostRequest): Promise<PngInfoResponse> {
        const response = await this.pnginfoapiSdapiV1PngInfoPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPostRaw(requestParameters: PreprocessSdapiV1PreprocessPostRequest): Promise<runtime.ApiResponse<PreprocessResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/preprocess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PreprocessResponseFromJSON(jsonValue));
    }

    /**
     * Preprocess
     */
    async preprocessSdapiV1PreprocessPost(requestParameters: PreprocessSdapiV1PreprocessPostRequest): Promise<PreprocessResponse> {
        const response = await this.preprocessSdapiV1PreprocessPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGetRaw(requestParameters: ProgressapiSdapiV1ProgressGetRequest): Promise<runtime.ApiResponse<ModulesApiModelsProgressResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.skipCurrentImage !== undefined) {
            queryParameters['skip_current_image'] = requestParameters.skipCurrentImage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/progress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModulesApiModelsProgressResponseFromJSON(jsonValue));
    }

    /**
     * Progressapi
     */
    async progressapiSdapiV1ProgressGet(requestParameters: ProgressapiSdapiV1ProgressGetRequest): Promise<ModulesApiModelsProgressResponse> {
        const response = await this.progressapiSdapiV1ProgressGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-checkpoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Refresh Checkpoints
     */
    async refreshCheckpointsSdapiV1RefreshCheckpointsPost(): Promise<string> {
        const response = await this.refreshCheckpointsSdapiV1RefreshCheckpointsPostRaw();
        return await response.value();
    }

    /**
     * Refresh Embeddings
     */
    async refreshEmbeddingsSdapiV1RefreshEmbeddingsPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-embeddings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Refresh Embeddings
     */
    async refreshEmbeddingsSdapiV1RefreshEmbeddingsPost(): Promise<string> {
        const response = await this.refreshEmbeddingsSdapiV1RefreshEmbeddingsPostRaw();
        return await response.value();
    }

    /**
     * Refresh Loras
     */
    async refreshLorasSdapiV1RefreshLorasPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-loras`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Refresh Loras
     */
    async refreshLorasSdapiV1RefreshLorasPost(): Promise<string> {
        const response = await this.refreshLorasSdapiV1RefreshLorasPostRaw();
        return await response.value();
    }

    /**
     * Refresh Vae
     */
    async refreshVaeSdapiV1RefreshVaePostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/refresh-vae`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Refresh Vae
     */
    async refreshVaeSdapiV1RefreshVaePost(): Promise<string> {
        const response = await this.refreshVaeSdapiV1RefreshVaePostRaw();
        return await response.value();
    }

    /**
     * Reloadapi
     */
    async reloadapiSdapiV1ReloadCheckpointPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/reload-checkpoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Reloadapi
     */
    async reloadapiSdapiV1ReloadCheckpointPost(): Promise<string> {
        const response = await this.reloadapiSdapiV1ReloadCheckpointPostRaw();
        return await response.value();
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPostRaw(requestParameters: SetConfigSdapiV1OptionsPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Set Config
     */
    async setConfigSdapiV1OptionsPost(requestParameters: SetConfigSdapiV1OptionsPostRequest): Promise<string> {
        const response = await this.setConfigSdapiV1OptionsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/skip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Skip
     */
    async skipSdapiV1SkipPost(): Promise<string> {
        const response = await this.skipSdapiV1SkipPostRaw();
        return await response.value();
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPostRaw(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest): Promise<runtime.ApiResponse<TextToImageResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/txt2img`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StableDiffusionProcessingTxt2ImgToJSON(requestParameters.stableDiffusionProcessingTxt2Img),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TextToImageResponseFromJSON(jsonValue));
    }

    /**
     * Text2Imgapi
     */
    async text2imgapiSdapiV1Txt2imgPost(requestParameters: Text2imgapiSdapiV1Txt2imgPostRequest): Promise<TextToImageResponse> {
        const response = await this.text2imgapiSdapiV1Txt2imgPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest): Promise<runtime.ApiResponse<TrainResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/embedding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Embedding
     */
    async trainEmbeddingSdapiV1TrainEmbeddingPost(requestParameters: TrainEmbeddingSdapiV1TrainEmbeddingPostRequest): Promise<TrainResponse> {
        const response = await this.trainEmbeddingSdapiV1TrainEmbeddingPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest): Promise<runtime.ApiResponse<TrainResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sdapi/v1/train/hypernetwork`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Train Hypernetwork
     */
    async trainHypernetworkSdapiV1TrainHypernetworkPost(requestParameters: TrainHypernetworkSdapiV1TrainHypernetworkPostRequest): Promise<TrainResponse> {
        const response = await this.trainHypernetworkSdapiV1TrainHypernetworkPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Unloadapi
     */
    async unloadapiSdapiV1UnloadCheckpointPostRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sdapi/v1/unload-checkpoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Unloadapi
     */
    async unloadapiSdapiV1UnloadCheckpointPost(): Promise<string> {
        const response = await this.unloadapiSdapiV1UnloadCheckpointPostRaw();
        return await response.value();
    }

}
