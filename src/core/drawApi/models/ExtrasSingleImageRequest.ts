/* tslint:disable */
/* eslint-disable */
/**
 * sdapiv1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ExtrasSingleImageRequest
 * @export
 * @interface ExtrasSingleImageRequest
 */
export interface ExtrasSingleImageRequest {
    /**
     * Resize Mode，Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    resizeMode?: ExtrasSingleImageRequestResizeModeEnum;
    /**
     * Show results，Should the backend return the generated image?
     * @type {boolean}
     * @memberof ExtrasSingleImageRequest
     */
    showExtrasResults?: boolean;
    /**
     * GFPGAN Visibility，Sets the visibility of GFPGAN, values should be between 0 and 1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    gfpganVisibility?: number;
    /**
     * CodeFormer Visibility，Sets the visibility of CodeFormer, values should be between 0 and 1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    codeformerVisibility?: number;
    /**
     * CodeFormer Weight，Sets the weight of CodeFormer, values should be between 0 and 1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    codeformerWeight?: number;
    /**
     * Upscaling Factor，By how much to upscale the image, only used when resize_mode=0.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    upscalingResize?: number;
    /**
     * Target Width，Target width for the upscaler to hit. Only used when resize_mode=1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    upscalingResizeW?: number;
    /**
     * Target Height，Target height for the upscaler to hit. Only used when resize_mode=1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    upscalingResizeH?: number;
    /**
     * Crop to fit，Should the upscaler crop the image to fit in the chosen size?
     * @type {boolean}
     * @memberof ExtrasSingleImageRequest
     */
    upscalingCrop?: boolean;
    /**
     * Main upscaler，The name of the main upscaler to use, it has to be one of this list: 
     * @type {string}
     * @memberof ExtrasSingleImageRequest
     */
    upscaler1?: string;
    /**
     * Secondary upscaler，The name of the secondary upscaler to use, it has to be one of this list: 
     * @type {string}
     * @memberof ExtrasSingleImageRequest
     */
    upscaler2?: string;
    /**
     * Secondary upscaler visibility，Sets the visibility of secondary upscaler, values should be between 0 and 1.
     * @type {number}
     * @memberof ExtrasSingleImageRequest
     */
    extrasUpscaler2Visibility?: number;
    /**
     * Upscale first，Should the upscaler run before restoring faces?
     * @type {boolean}
     * @memberof ExtrasSingleImageRequest
     */
    upscaleFirst?: boolean;
    /**
     * Image，Image to work on, must be a Base64 string containing the image's data.
     * @type {string}
     * @memberof ExtrasSingleImageRequest
     */
    image?: string;
}

export function ExtrasSingleImageRequestFromJSON(json: any): ExtrasSingleImageRequest {
    return ExtrasSingleImageRequestFromJSONTyped(json, false);
}

export function ExtrasSingleImageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtrasSingleImageRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resizeMode': !exists(json, 'resize_mode') ? undefined : json['resize_mode'],
        'showExtrasResults': !exists(json, 'show_extras_results') ? undefined : json['show_extras_results'],
        'gfpganVisibility': !exists(json, 'gfpgan_visibility') ? undefined : json['gfpgan_visibility'],
        'codeformerVisibility': !exists(json, 'codeformer_visibility') ? undefined : json['codeformer_visibility'],
        'codeformerWeight': !exists(json, 'codeformer_weight') ? undefined : json['codeformer_weight'],
        'upscalingResize': !exists(json, 'upscaling_resize') ? undefined : json['upscaling_resize'],
        'upscalingResizeW': !exists(json, 'upscaling_resize_w') ? undefined : json['upscaling_resize_w'],
        'upscalingResizeH': !exists(json, 'upscaling_resize_h') ? undefined : json['upscaling_resize_h'],
        'upscalingCrop': !exists(json, 'upscaling_crop') ? undefined : json['upscaling_crop'],
        'upscaler1': !exists(json, 'upscaler_1') ? undefined : json['upscaler_1'],
        'upscaler2': !exists(json, 'upscaler_2') ? undefined : json['upscaler_2'],
        'extrasUpscaler2Visibility': !exists(json, 'extras_upscaler_2_visibility') ? undefined : json['extras_upscaler_2_visibility'],
        'upscaleFirst': !exists(json, 'upscale_first') ? undefined : json['upscale_first'],
        'image': !exists(json, 'image') ? undefined : json['image'],
    };
}

export function ExtrasSingleImageRequestToJSON(value?: ExtrasSingleImageRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resize_mode': value.resizeMode,
        'show_extras_results': value.showExtrasResults,
        'gfpgan_visibility': value.gfpganVisibility,
        'codeformer_visibility': value.codeformerVisibility,
        'codeformer_weight': value.codeformerWeight,
        'upscaling_resize': value.upscalingResize,
        'upscaling_resize_w': value.upscalingResizeW,
        'upscaling_resize_h': value.upscalingResizeH,
        'upscaling_crop': value.upscalingCrop,
        'upscaler_1': value.upscaler1,
        'upscaler_2': value.upscaler2,
        'extras_upscaler_2_visibility': value.extrasUpscaler2Visibility,
        'upscale_first': value.upscaleFirst,
        'image': value.image,
    };
}

/**
* @export
* @enum {string}
*/
export enum ExtrasSingleImageRequestResizeModeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}


